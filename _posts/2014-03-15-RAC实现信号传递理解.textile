---
layout: post
title: RAC实现信号传递理解
category: tech
---

<!-- 下载模块：用工厂和工人之间的关系来理解。

工人在具体任务开始之后，需要报告工作的进度（下载进度), [subscriber sendNext:progressDic] 这样订阅者（工厂就实时知道某条流水线的进度）
工厂要反馈给需求方对应的进度 -->

需求（版本一）：
下载管理器支持并发下载N个任务，在任务下载完成后，取出等待队列中的新任务进行下载。

### 关于Side Effect


{% highlight objc %}

RACSignal *signal = [RACSignal createSignal:^ RACDisposable * (id<RACSubscriber> subscriber) {
    NSLog(@"Excute");
    [subscriber sendNext:@"abcd"];
    [subscriber sendCompleted];
    return nil;
}];
{% endhighlight %}


普通情况如上这段代码，如果有N个subscriber，那么signal会被N次触发，控制台里会输出N次Excute。
如果不想多次输出，可以使用 replay 方法，作用是保证signal只被触发一次，然后把sendNext的value存起来，下次再有新的subscriber时，直接发送缓存的数据。

这个地方还有一个需要注意到地方是关于hot signal 和 cold signal 
上面那段代码，在没有被subscribe的情况下，signal是不会被触发的。只有被subscribe之后，才会被触发。
如果是使用了 replay 方法，那么即使没有被subscribe，信号还是会被触发，打印出Excute.

那么对于一个新创建的下载任务，我们将会得到一个关于下载任务的信号，通过订阅我们可以知道这个任务当前的下载进度以及下载完成等通知。
思考：如果这个关于下载任务的信号在多个地方被subscribe，那么就意味着我们的signal会被创建多次，这可不是我们要的。
那我们用replay方法就可以避免side effect 副作用了.


{% highlight objc %}
- (RACSignal *)fetZipUrl:(NSString *)url
{
    
    LVDownloadProgress *downloadProgess = [[LVDownloadProgress alloc] init];
    
    
    return [[[RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths objectAtIndex:0];//去处需要的路径
        
        NSString *md5Name = [url MD5Digest];
        NSString *zipPath = [documentsDirectory stringByAppendingFormat:@"/%@.zip",md5Name];
        NSString *tmpzipPath = [documentsDirectory stringByAppendingFormat:@"/Tmp-%@.zip",md5Name];
        
        request = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:url]];
        
        [request setAllowResumeForFileDownloads:YES];
        [request setDownloadDestinationPath: zipPath];
        [request setTemporaryFileDownloadPath: tmpzipPath];
        
        [request setDownloadProgressDelegate:downloadProgess];
        
        [request startAsynchronous];
        NSLog(@"filePath :%@",documentsDirectory);
        
        [request setCompletionBlock:^{
            NSDictionary *progressDic = @{@"ID":md5Name,@"Progress":@(YES),@"Url":url};
            [subscriber sendNext:progressDic];
            [subscriber sendCompleted];
        }];
        [request setFailedBlock:^{
            [subscriber sendError:nil];
        }];
        
        

        
        [RACObserve(downloadProgess, progress) subscribeNext:^(id x) {
            NSDictionary *progressDic = @{@"ID":md5Name,@"Progress":x,@"Url":url};
            [subscriber sendNext:progressDic];
        }];
        
        
        // 4
        return nil;
    }] doError:^(NSError *error) {
        NSLog(@"Error %@ ",error);
    }] replay];
}
{% endhighlight %}


创建新下载要满足两个条件：等待队列中有等待的任务，有空闲的下载线程
我们可以将这两个条件理解成两个信号，一旦有一个条件被触发，就同时检查是否满足如上两个条件。
这样这两个信号又被我们合并成一个信号，这个信号输出 是否满足条件的bool值.
然后通过flattenmap成一个下载的信号.

{% highlight  objc %}
RACSignal *urlsSignal = [RACObserve(self, urls) filter:^BOOL(NSArray *value) {
            return [value count] > 0;
        }];		
        
 //说明：freeWorkers是一个mutableArray，如果并发下载为N，那么freeWokers数组中就有N个下载工人可以同时开展下载任务。
 RACSignal *freeWorkersSignal = [RACObserve(self,freeWorkers) filter:^BOOL(NSArray *value) {
            return [value count] > 0;
        }];              
        
 [[[[RACSignal combineLatest:@[urlsSignal, freeWorkersSignal] reduce:^(NSArray *urls, NSArray *freeworkers){
            if ([urls count] > 0 && [freeworkers count] > 0) return @(YES);
            else return @(NO);
        }]filter:^BOOL(NSValue *value) {
            return [value  isEqualToValue:@(YES)];
        }] flattenMap:^id(id value) {
            return [self setupNewJob];
        }] subscribeNext:^(NSDictionary *x) {
            self.latestJobDic = x;
        } completed:^{
           //下载完成后，我们需要 通过改变self.urls 触发urlsSignal 检查 是否有新任务可以创建
            NSMutableArray *t = [[NSMutableArray alloc] initWithArray:_urls];
            self.urls = t;
        }];    

{% endhighlight %}

你可能比较好奇 setupNewJob 这里做了什么事情。
其实主要是创建 我们之前单个下载任务的信号，同时修改一下 我们目前的队列状态。
创建了一个任务后，从_freeWokers中取出一个空闲工人，放到busyWokers队列中。同时等待队列urls中，移除掉开始下载的url。
下载完成或者失败后，重新将完成下载任务的工人放到空闲队列_freeWokers中。

{% highlight objc %}
- (RACSignal *) setupNewJob
{
    NSLog(@"setup new job function ");
    
    LVSingleDownloadWorker *freeWorker = [_freeWorkers firstObject];
    NSString *url = [_urls firstObject];
    
    //move free worker to busy worker list
    [_busyWorkers addObject:freeWorker];
    [_freeWorkers removeObjectAtIndex:0];
    [_urls removeObjectAtIndex:0];
    
    
    RACSignal *singleJob = [freeWorker fetZipUrl:url];
    
    [singleJob subscribeNext:^(NSDictionary *x) {
     
        NSLog(@"note point Progress %@, freeworker %@",x ,_freeWorkers);

    } error:^(NSError *error) {
        NSLog(@"Error  next one");
        [freeWorker cancelDownload];
        [_freeWorkers addObject:freeWorker];
        [_busyWorkers removeObject:freeWorker];
        
    } completed:^{
        NSLog(@"####complete  one#####");
        [_freeWorkers addObject:freeWorker];
        [_busyWorkers removeObject:freeWorker];
    }];

    return singleJob;
  
}

{% endhighlight %}




有了大概的逻辑,现在我们需求方 交给工厂之后 需要关注一下 任务的进度,当然进度颗粒度我们可以自己控制.
比如说我们现在暴露给需求方的接口是 

{% highlight objc %}
-(RACSignal *)fetZipUrls:(NSArray *)urls
{% endhighlight %}

需求方拿到这个信号，我们的工厂就可以通过这个信号传递当前的任务进度给需求方。
如果现在 需求方要求的颗粒度比较细.需要具体某一个任务的下载百分比.
那么我们可以定义一个_detailSignal,这个signal观察最近的进度变化，反馈给需求方

{% highlight objc %}
@implementation LVDownloadFactory{
    NSDictionary  *_latestJobDic;
    RACSignal *_globleSignal; //所有任务宏观进度信号
    RACSignal *_detailSignal; //每个任务微观进度信号
    
     NSMutableArray *_urls;    //等待下载的队列
     NSMutableArray *_freeWorkers; //处于空闲工人队列
     NSMutableArray *_busyWorkers; //执行任务工人队列
}

{% endhighlight %}

工厂初始化的时候 _detailSignal 反应 _latestJobDic 的变化。


_detailSignal = RACObserve(self, latestJobDic);


每个需求方只需要关注自己的下载任务，多余的任务进度它不关心，所以我们可以通过过滤生产一个新的信号给 需求方。



{% highlight objc %}
-(RACSignal *)fetZipUrls:(NSArray *)urls
{
    NSMutableArray *t = [[NSMutableArray alloc] initWithArray:_urls];
    [t addObjectsFromArray:urls];
    self.urls = t;
    
    return  [_detailSignal filter:^BOOL(NSDictionary *value) {
        for (NSString *url in urls) {
            if ([[value objectForKey:@"Url"] isEqualToString:url]) {
                return YES;
            }
        }
        return NO;
    }];
}
{% endhighlight %}

附上此段源代码地址。

https://github.com/buptsse/Git-Project/tree/V-1.1



